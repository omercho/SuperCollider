
/*
IFvKeys.times(2);
IFvKeys.pat_1;

~octvKeys=4;

*/


IFvKeys {
var <>basTime = 1;
classvar <>counter3 = 0;


	*initClass {
		StartUp add: {
		Server.default.doWhenBooted({ this.globals; this.preSet; this.default; });
		}
	}

	*globals{

		~vKeysCh=3;
		~vKeysTimes=1;
		~octvKeys=3;
		~transvKeys=0;
		~legvKeys=0;
		~stretchvKeys=0;

		~vKeysMac1=1; ~vKeysMac2=2;
		~vKeysMac3=3; ~vKeysMac4=4;
		~vKeysMac5=5; ~vKeysMac6=6;
		~vKeysMac7=7; ~vKeysMac8=8;
	}

	*preSet{}


	*default {

		~nt1vKeys = PatternProxy( Pseq([0], inf));
		~nt1vKeysP = Pseq([~nt1vKeys], inf).asStream;
		~dur1vKeys = PatternProxy( Pseq([1], inf));
		~dur1vKeysP = Pseq([~dur1vKeys], inf).asStream;
		~amp1vKeys = PatternProxy( Pseq([0.9], inf));
		~amp1vKeysP = Pseq([~amp1vKeys], inf).asStream;
		~sus1vKeys = PatternProxy( Pseq([1], inf));
		~sus1vKeysP = Pseq([~dur1vKeys], inf).asStream;


	}

	*new{|i=1|
		var val;
		val=i;
		case
		{ i == val }  {
			{val.do{
				~nt1vKeysP.next;
				~dur1vKeysP.next;
				~amp1vKeysP.next;
				~sus1vKeysP.next;
				~nt1vKeysSon=~nt1vKeysP;
				~dur1vKeysSon=~dur1vKeysP;
				~amp1vKeysSon=~amp1vKeysP;
				~sus1vKeysSon=~sus1vKeysP;
				//~nt1vKeysSon.value;
				//~dur1vKeysSon.value;
				//~sus1vKeysSon.value;
				//~amp1vKeysSon.value;

				this.p1(val);

				~durMul*((~dur1vKeysSon.value)/i).wait;
			}}.fork;
		}

	}

	*p1 {|i=1|
		Pbind(
			\chan, ~vKeysCh,
			\type, \midi, \midiout,~md1, \scale, Pfunc({~scl2}, inf),
			\dur, Pseq([Pseq([~dur1vKeysSon.value/i],1)], 1),
			\degree, Pseq([~nt1vKeysSon.value], 1),
			\amp, Pseq([~amp1vKeysSon.value], 1),
			\sustain, Pseq([~sus1vKeysSon.value],1),
			\mtranspose, Pseq([~transvKeys.value], 1),
			\octave, ~octvKeys,
			\legato, ~legvKeys,
			\stretch, ~stretchvKeys
		).play;

		//this.count2;
		//this.timesCount;
	}

	//vKeys Beat Counter
	*count3 {
		1.do{
			counter3 = counter3 + 1;
			counter3.switch(
				3, {
					("            vKeysCnt"+counter3).postln;
					this.ctl_3;
					counter3 = 0;

				}

			)
		}

	}


	*ctl_1 {


	}

	*ctl_2 {
		("vKeys CTL 2").postln;

	}

	*ctl_3 {
		~vKeysMcr1.stop;
		~vKeysMcr1={
			var val;
			val = Pslide((30..120).mirror, inf,3,1,0).asStream;
			240.do{
				~md1.control(~vKeysCh, 0, val.next);
			(~dur.next*(1/8)).wait;
			}
		}.fork;

	}
	*ctl_9 {


	}

	*ctl_18 {


		~vKeysMcr2.stop;
		~vKeysMcr2={
			var val;
			val = Pbrown(37,90, 1, inf).asStream;
			8.do{
				~md1.control(~vKeysCh, ~vKeysMac2, val.next);
			(~dur.next*(1/6)).wait;
			}
		}.fork;


	}
}